"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from encrypted_secrets import get_secret

# import netifaces
import os
import sys
import django
from django.utils.encoding import smart_str


django.utils.encoding.smart_text = smart_str
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

print("we are on prod")

"""adapters = ifaddr.get_adapters()

adapter_names = []

for adapter in adapters:
    adapter_names.append(adapter.nice_name)"""


DEBUG = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = "abcdefgh"



ALLOWED_HOSTS = [
    "harkai-firebase.web.app",
    "localhost",
    "127.0.0.1:8000",
    "127.0.0.1",
    "167.99.145.112",
    "3.89.123.19",
    "backend.getharkai.com",
    "20.120.218.168",
    "web.getharkai.com",
    "harkai-web.vercel.app"
    
]



INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "channels",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
   # "drf_firebase_auth"

    "corsheaders",
    "encrypted_secrets",
        'app.apps.AppConfig', 
    
]

ASGI_APPLICATION = 'harkaibackend.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

]

ROOT_URLCONF = "harkaibackend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "harkaibackend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
# STATIC_URL = "/"
"""STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]"""

STATIC_ROOT = os.path.join(BASE_DIR, "static")


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        #"drf_firebase_auth.authentication.FirebaseAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}


"""DRF_FIREBASE_AUTH = {
    "ALLOW_ANONYMOUS_REQUESTS": True,
    # path to JSON file with firebase secrets
    "FIREBASE_SERVICE_ACCOUNT_KEY": "narration-box-firebase-adminsdk-aliiz-075fc9fd15.json",
    # allow creation of new local user in db
    "FIREBASE_CREATE_LOCAL_USER": True,
    # attempt to split firebase user.display_name and set local user
    # first_name and last_name
    "FIREBASE_ATTEMPT_CREATE_WITH_DISPLAY_NAME": False,
    # commonly JWT or Bearer (e.g. JWT <token>)
    "FIREBASE_AUTH_HEADER_PREFIX": "JWT",
    # verify that JWT has not been revoked
    "FIREBASE_CHECK_JWT_REVOKED": True,
    # require that firebase user.email_verified is True
    "FIREBASE_AUTH_EMAIL_VERIFICATION": False,
}"""

CORS_ALLOW_ALL_ORIGINS = True

"""CORS_ALLOWED_ORIGINS = [
    "https://web.getharkai.com",
    "web.getharkai.com",
    "https://harkai-firebase.web.app",
    "https://harkai-web.vercel.app",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    "authorization",
    "content-type",
    "x-csrftoken",
    "accept",
    "origin",
    "user-agent",
    "x-requested-with",
]"""



# CELERY STUFF
CELERY_BROKER_URL = "redis://127.0.0.1:6379"
CELERY_RESULT_BACKEND = "redis://127.0.0.1:6379"
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'America/New_York'
